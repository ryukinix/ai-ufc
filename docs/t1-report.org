#+STARTUP: showall align
#+OPTIONS: todo:nil tasks:("IN-PROGRESS" "DONE") tags:nil num:nil toc:nil
#+AUTHOR: Manoel Vilela
#+TITLE: Inteligência Computacional - UFC (2019.1) @@latex:\\@@ T1
#+EXCLUDE_TAGS: TOC_3
#+LANGUAGE: bt-br
#+LATEX_HEADER: \usepackage[]{babel}
#+LATEX_HEADER: \usepackage{indentfirst}
#+LATEX_HEADER: \usepackage{commath}
#+LATEX_HEADER: \renewcommand\listingscaption{Código}
#+LATEX_CLASS:  report

* DONE Descrição
  CLOSED: [2019-04-23 ter 22:55]

Este trabalho contém uma exploração dos tópicos:

+ Busca Local e Optimização
+ Lógica Fuzzy
+ Regressão

A linguagem escolhida para o desenvolvimento é Python, versão 3.6 no
mínimo. Caso o usuário use sistemas Windows, é recomendado instalar a distribuição Python Anaconda,
disponível no sítio: https://www.anaconda.com/distribution/. Caso seja
algum Linux derivado do Debian, como Ubuntu e Mint, poderá ser
realizado o seguinte comando no terminal:

#+BEGIN_EXAMPLE
sudo apt install python3 python3-numpy python3-matplotlib -y
#+END_EXAMPLE


Esta distribuição Anaconda já possui os pacotes [[https://www.numpy.org/][NumPy]] e [[https://matplotlib.org][Matplotlib]] que
estarei utilizando para realizar operações de álgebra linear, matrizes
e geração de gráficos.

* DONE Q1: Busca Local e Optimização
  CLOSED: [2019-04-23 ter 23:13]

A função desta tarefa (1) possuí múltiplos máximos globais e locais por ser
uma função periódica. Tal função também por ser multivariável, gerará
um gráfico num espaço tridimensional. Alguns gŕaficos interessantes
mostrando a região de interesse poderá ser visto a seguir.



#+BEGIN_latex latex
\begin{equation}
f(x,y) = \abs{x \cdot sen(y\cdot\dfrac{\pi}{4}) + y \cdot sen(x\cdot\dfrac{\pi}{4})}
\end{equation}
#+END_latex

Os gráficos com a subida de morro (hill climbing) e a imagem de \(
f(x,y \) poderá ser consultada nos próximos gráficos.


#+ATTR_LATEX: :placement [H]
#+CAPTION: Gráfico de supérfice gerada por \( f(x, y) \). (WolframAlpha, https://bit.ly/2UCIphO)
[[file:pics/q1-3dplot.png]]

#+ATTR_LATEX: :placement [H]
#+CAPTION: Visualização com linhas de contorno, é possível observar os máximos nas temperaturas mais frias isoladas.
[[file:pics/q1-polos.png]]


#+ATTR_LATEX: :placement [H]
#+CAPTION: Máximo local 1.
[[file:pics/q1-local.png]]


#+ATTR_LATEX: :placement [H]
#+CAPTION: Máximo local 2.
[[file:pics/q1-local2.png]]


#+ATTR_LATEX: :placement [H]
#+CAPTION: Máximo global no intervalo proposto encontrado pelo algoritmo /Hill Climbing/.
[[file:pics/q1-global.png]]

A variação dos máximos foram entre 18 e 36.09 em alguns experimentos
rodados para o valor de \( f(x, y) \).  Como é possível perceber nos
gráficos de supérfice gerado pelo /WolframAlpha/, essa função é uma
grande armadilha de máximos locais. Pela natureza períodica a função
possuí infinitos máximos/mínimos locais, por outro lado, há apenas um
máximo global na região de interesse: \( 18.09, 18.09 \).

Para o reinício aleatório o usuário se quiser um novo nó deverá rodar
novamente o algoritmo. Nesta implementação o nó gerado inicialmente
sempre será pseudo-aleatório (\( random.randint \). As buscas locais
foram realizadas de forma restrita no intervalo sugerido ~[0, 20]~,
portanto nós que extrapolam esse intervalo são ignorados durante a busca.

* IN-PROGRESS Q2: Lógica Fuzzy

Assim como explicado em sala de aula, essa questão foi desenvolvida
utilizado a inferência de Mamdami. A implementação mais uma vez é em
Python. A seguir poderá ser visto a saída do programa.

#+BEGIN_EXAMPLE
== ENTRADAS
PRESSÃO NO PEDAL:  60
VELOCIDADE DO CARRO:  80
VELOCIDADE DA RODA:  55
== FUZZY SYSTEM
R1:  0.5
R2:  0.19999999999999996
R3:  0.08333333333333337
R4:  0
APERTE:  0.7
LIBERE:  0.08333333333333337
== SAÍDA
PRESSÃO NO FREIO:  63.9143622307
#+END_EXAMPLE

* DONE Q3: Regressão Polinomial
  CLOSED: [2019-04-23 ter 23:13]

Dataset:
+ Variável de entrada \( x \): velocidade do vento em \( m/s \)
+ Variável de saída \( y \): potência gerada em \( KWatts \)

Em Python o operador ~@~ é utilizado pra realizar multiplicação entre
matrizes, enquanto o operador ~*~ é reservado para fazer multiplicação
de elementos ponto-a-ponto. Por esse motivo o cálculo da
pseudo-inversa foi realizada utilizando o operador ~@~ , dado que as
operações envolvem matrizes usando a biblioteca NumPy.

A seguir é demonstrado o resultado textual do programa assim como
alguns gráfico comparativos dos modelos gerado analisando as melhorias
no ajusto de curva em relação ao crescimento do grau e sua relevância
no modelo comparado.

#+BEGIN_EXAMPLE
== SUMÁRIO
-----------
   vec(k):  [2, 3, 4, 5]
  vec(r2):  [ 0.94342  0.96902  0.97372  0.97373]
vec(r2aj):  [ 0.94337  0.96898  0.97368  0.97367]
vec(rmse):  [ 25.08257  18.55990  17.09358  17.09314]
r2 - r2aj:  [ 0.00005  0.00004  0.00005  0.00006]

REGRESSÃO k=2
---------------
RMSE:	 25.08257
  R2:	 0.94342
R2aj:	 0.94337
   B:	 [-92.98000  26.72300  1.69300]

REGRESSÃO k=3
---------------
RMSE:	 18.5599
  R2:	 0.96902
R2aj:	 0.96898
   B:	 [ 32.62400 -58.76000  15.05200 -0.59200]

REGRESSÃO k=4
---------------
RMSE:	 17.09358
  R2:	 0.97372
R2aj:	 0.97368
   B:	 [-0.39100  10.37300 -5.00400  1.43400 -0.06800]

REGRESSÃO k=5
---------------
RMSE:	 17.09314
  R2:	 0.97373
R2aj:	 0.97367
   B:	 [-0.18000  8.16400 -3.93000  1.24600 -0.05400 -0.00000]
#+END_EXAMPLE

#+ATTR_LATEX: :placement [H]
#+CAPTION: Regressões com grau de 2 a 5.
[[file:pics/q3-regression.png]]


#+ATTR_LATEX: :placement [H]
#+CAPTION: Comparação entre Regressão de grau 2 e 3: diferença relevante.
[[file:pics/q3-regression-2-3.png]]

#+ATTR_LATEX: :placement [H]
#+CAPTION: Comparação entre Regressão de grau  2 e 5: diferença muito relevante..
[[file:pics/q3-regression-2-5.png]]

#+ATTR_LATEX: :placement [H]
#+CAPTION: Comparação entre Regressão de grau 4 e 5: diferença pouco relevante..
[[file:pics/q3-regression-4-5.png]]



#+ATTR_LATEX: :placement [H]
#+CAPTION: Métricas para k=4 e k=5.
[[file:pics/q3-regression-metrics.png]]


A fim de curiosidade, para \( k > 9 \) perde todo o sentido da
regressão polinomial, pois não será melhor que a linear \( k = 1 \). A
seguir um gráfico demonstrando essa afirmação.

#+ATTR_LATEX: :placement [H]
#+CAPTION: Para \( k > 9 \) até a regressão linear é um modelo melhor.
[[file:pics/q3-regression-nonsense.png]]


Portanto, para finalizar, ao analisar o vetor de \( R^{2}_{aj}(k) \) é possível concluir que o melhor
k é 4 porque para \( R^{2}_{aj}(4) > R^{2}_{aj}(5) \).
